// printf("word: %s\n", word);
            // scanf("%d", &x);

            // tmpBuffer[0] = ch;
            // isSeparatorFlag = isSeparator(tmpBuffer, separators_list);

            // if (isSeparatorFlag == 1)
            // {
            //     // Writing the token
            //     if (word_length > 0)
            //     {
            //         printf("%s\n", word);
            //     }

            //     // Writing the token (separator)
            //     printf("%s\n", tmpBuffer);

            //     // Reset the word
            //     word[0] = '\0';
            //     word_length = 0;

            //     // Seeting the lexican unit equal to separator, to be used for further tests
            //     strcpy(lexical_unit, "sep");
            // }
            // else
            // {
            //     if (word_length == 0)
            //     {
            //         // Directly perfoming concatenation
            //         strncat(word, &ch, 1);
            //         word_length++;

            //         // Determine the lexical unit in wich the string belongs
            //         strcpy(lexical_unit, classify(word, keywords_list, separators_list, logical_operators_list, relational_operators_list));

            //         // Classify the new character
            //         if (strcmp(lexical_unit, "undefined") == 0) // Note: we can add here a test on keyword but there is no keyword with one character
            //         {
            //             printf("%s : undefined\n", word);
            //             word[0] = '\0';
            //             word_length = 0;
            //         }
            //     }
            //     else
            //     {
            //         // Check for the classification flag
            //         tmpWord[0] = '\0';
            //         strcpy(tmpWord, word);
            //         strncat(tmpWord, &ch, 1);

            //         // Determine the lexical unit in wich the string belongs
            //         strcpy(lexical_unit_backup, lexical_unit);
            //         strcpy(lexical_unit, classify(tmpWord, keywords_list, separators_list, logical_operators_list, relational_operators_list));
            //         if (strcmp(lexical_unit_backup, "undefined") != 0) // defined
            //         {
            //             if (strcmp(lexical_unit, "undefined") == 0)
            //             {
            //                 // Writing the token
            //                 printf("%s\n", word);

            //                 // Reset the word
            //                 word[0] = '\0';
            //                 strncat(word, &ch, 1);
            //                 word_length = 1;

            //                 // Classify the new character
            //                 strcpy(lexical_unit, classify(word, keywords_list, separators_list, logical_operators_list, relational_operators_list));

            //                 if (strcmp(lexical_unit, "undefined") == 0)
            //                 {
            //                     printf("%s : undefined\n", word);
            //                     word[0] = '\0';
            //                     word_length = 0;
            //                 }
            //             }
            //             else
            //             {
            //                 if (strcmp(lexical_unit, "keyword") == 0)
            //                 {
            //                     // Displaying the keyword
            //                     printf("%s\n", tmpWord);
            //                     word[0] = '\0';
            //                     word_length = 0;
            //                 }
            //                 else
            //                 {
            //                     strncat(word, &ch, 1);
            //                     word_length++;   
            //                     //strcpy(lexical_unit, classify(word, keywords_list, separators_list, logical_operators_list, relational_operators_list));                           
            //                 }
            //             }
            //         }
            //     }
            // }